#!/usr/bin/perl

use Digest::SHA;

use strict;

sub main()
{
	print "Welcome to Ghost.\n";

	my $verb = shift @ARGV;

	print " Verb = [$verb]\n";

	if( $verb = "info" )
	{
		doverb_info();
	}
}

sub doverb_info()
{

	my $store = GhostStore->new();

	foreach my $lfn (@ARGV)
	{
		print( "Info request for: $lfn\n");
		my $g = Ghost->make( $lfn );
		my $h = $g->getFullHash();
		print("    $h\n");

		$store->addGhost( $g );
	}	

	$store->writeAsDescriptor( "File" );


}



sub getFullHash($)
{
	## TODO - implement without full slurp

	my $lfn = shift;

	my $sha = Digest::SHA->new(1);
	$sha->addfile( $lfn );
	my $hexdigest = $sha->hexdigest();

	return( "SHA1/FULL/$hexdigest");

}


package GhostStore;

use base qw(Class::Accessor);
GhostStore->mk_accessors( qw(ghosts) );

sub new
{
	my $class = shift;
	my $self = $class->SUPER::new();
	$self->ghosts( [] );
	return $self;
}

sub addGhost($)
{
	my $self= shift;
	my $g = shift;

	my $ghosts = $self->ghosts();
	push @$ghosts, $g;
}

sub writeAsDescriptor($)
{
	my $self = shift;
	my $fn = shift;
	

}


package Ghost;

use base qw(Class::Accessor);
Ghost->mk_accessors( qw(lfn lastFullHash fullHash ) );

sub make($)
{
	my $class = shift;
	my $lfn = shift;

	my $self = $class->new();

	print "Making Ghost for lfn=[$lfn]\n";
	$self->lfn( $lfn );
	return $self;
}


sub getFullHash
{
	my $self = shift;
	my $lfn = $self->lfn();

	$self->lastFullHash( time() );


 	my $fullhash = main::getFullHash( $lfn );

	$self->fullHash( $fullhash );

	return $fullhash;
}


###


main::main();
exit();



