# Testing Architecture

global symbol CP( "sdfsdf")
codepath switch, saying that a case was reached or not reached
and end of test should reveal out of the universe of codepaths what was hit. 

each run should increment a runcount
generate a unique name for that invocation
and compare what it got this time to last time


for this to work, all prints must become debugs
and the debug flags must be promoted to top level things
probably long time we did this anyway
a --test-harness mode 
	makes debug statements go to STDERR
	should dump out run variables at the end

+++++++++++++++

Verify that adding and removing AFNs properly propogates through to the AFN global cache, within and across invocations.





++++++

found a really nasty situation -- RESOLVED, DUE TO AFN CACHE SAVE

gfs rsync source dest/
remove the fiels in dest, not the .gfs file
now get crashes as two ghosts point to same filename, with the older ghost trying to learn from the newer one.
can't reproduce see reproduceme.txt, line with text string "Internal assert - doesn't seem right to not be one step ahead of target at";
### motr investiation - can't rule out a stale .gfs_ip file that written with old format

++++++++++++++++++

make sure ls never forces a rehash
make sure that when decending and getting stats, ls finds changed file sizes that lead to revoked hashes
snapshot something
make sure we can ls the thing
make sure snapshot does or does not invalidate other things when its being built


Another great test:

gfs snapshot quxx
gfs ls snap:snapshot-5803.out:quxx

# snapshot a snapshot
gfs snapshot snap:snapshot-5803.out 

what happens if you snapshot over an existing one?
corner cases needed to be handled

+++++++

load some snapshots 
and then load newer snapshots over those
and check that the reconciliation / resolving tests are working properly



++++++++++++++++++++

# 000 - module
# 000 - invoke
so there is a file gfstest.out/run-000-000-YYYMMMDDD-HHHMMMSS.stdout
so there is a file gfstest.out/run-000-000-YYYMMMDDD-HHHMMMSS.stderr



after_run_do( sub { ck_reported_checksum_unchanged( 'file1' ) } );
mkfile qw( /tmp/gfstest/file1 15 );
mkfile qw( /tmp/gfstest/file2 20 );
cd '/tmp/gfstest';
run qw(gfs checksum file1)
baseline_reported_checksum( 'file1' );
run qw(gfs checksum /tmp/gfstest/file1);
ck_reported_checksum_unchanged( 'file1' );
cd '/';
run qw(gfs checksum ./tmp/gfstest/file1);
ck_reported_checksum_unchanged( 'file1' );
cd( '/tmp' );
run qw(gfs checksum /tmp/../tmp/gfstest/file1);
ck_reported_checksum_unchanged( 'file1' );
cd( '/tmp/gfstest' );
run qw(gfs checksum file1/);
ck_reported_checksum_unchanged( 'file1' );
run qw(gfs checksum ./file1);
ck_reported_checksum_unchanged( 'file1' );
run qw(gfs checksum fs:root:file1);
ck_reported_checksum_unchanged( 'file1' );
run qw(gfs checksum fs:root:./file1);
ck_reported_checksum_unchanged( 'file1' );
run qw(gfs checksum fs:root:../tmp/file1);
ck_reported_checksum_unchanged( 'file1' );
ck_runstat( 'run_files_stat', 0 );
ck_runstat( 'run_files_fullread', 0 );
full_reset(); # clear all working variables, delete WD, delete caches, etc

# Verify that GFS recognizes moved files within guardtime limits

mkfile qw( /tmp/gfstest/file1 15 );
mkfile qw( /tmp/gfstest/file2 20 );
cd '/tmp/gfstest';
gfs checksum file1
gfs checksum file2
mv file1 file2
gfs checksum file2
# now check that file2 checksum is not changed
add guard time
# now check that file2 checksum has changed
gfs checksum file1
verify it died file-not-found
gfs snapshot . 
verify file 1 is not in snapshot

# change to above, except that file1 is explicity revoked
# by an earlier call to checksum that fails

mkfile qw( /tmp/gfstest/file1 15 );
mkfile qw( /tmp/gfstest/file2 20 );
cd '/tmp/gfstest';
gfs checksum file1
gfs checksum file2
mv file1 file2
gfs checksum file1
# check error
gfs checksum file2
# now check that file2 checksum is not changed
add guard time
# now check that file2 checksum has changed
gfs checksum file1
verify it died file-not-found
gfs snapshot . 
verify file 1 is not in snapshot




