#!/usr/bin/perl

use strict;
use warnings;

#use diagnostics -verbose;

use File::Basename;
use File::Spec;
use File::Path;
use File::Copy;
use Cwd;

my $TESTSTATE_PWD = getcwd();
my $TESTSTATE_LASTRUN_STD;
my $TESTSTATE_LASTRUN_ERR;
my $TESTSTATE_LAST_OUTPUT;
my $TESTSTATE_TEST_NAME;


sub clear_test_env
{
	undef $TESTSTATE_PWD;
	undef $TESTSTATE_LASTRUN_STD;
	undef $TESTSTATE_LASTRUN_ERR;
	undef $TESTSTATE_LAST_OUTPUT;
	undef $TESTSTATE_TEST_NAME;

	system( 'rm -rv /tmp/gfstest/' );
}


sub testname
{
	my $name = shift;
	$TESTSTATE_TEST_NAME = $name;
}	

sub mkdirs($)
{
	my $dir = shift;

	# my $dirx = dirname $dir;

	# print "MKDIRS:[$dir]\n";
	eval { mkpath( $dir, 1 ) };
	$@ and die "Couldn't create dir path: $! $@";
	die "Did not find new path" if not -d $dir;

	return 1;
}

my %shaForSeed;

sub mkfile($$)
{
	my $path = shift;
	my $seed = shift;

	mkdirs(dirname($path) );

	open FILE, ">$path" or die "Cannot open $path: $!";
	print FILE "X-$seed" x 100;
	close FILE;

	$shaForSeed{$seed} = getSha( $path );

	print "$TESTSTATE_TEST_NAME - mkfile - $seed - $path\n";

}

sub getSha
{
	my $path = shift;
	my $sha = `shasum $path`;
	chomp $sha; 
	($sha =~ /^([^\s]+)\s/ ) or die;
	my $r = $1; 
	chomp $r;
	return $r;
}

sub cd($)
{
	my $newpath = shift;
	$TESTSTATE_PWD = $newpath;

	die unless -e $TESTSTATE_PWD;
	die unless -d $TESTSTATE_PWD;
}

sub run($)
{
	my @c = @_;

	my $i = 0;
	my $runPrefix = "gfstest.run.$i";

	$TESTSTATE_LASTRUN_STD = "$runPrefix.stdout";
	$TESTSTATE_LASTRUN_ERR = "$runPrefix.stderr";

	my $cmd = "( cd $TESTSTATE_PWD && @c ) > $TESTSTATE_LASTRUN_STD 2> $TESTSTATE_LASTRUN_ERR";
	print "RUN:[$cmd]\n";
	system($cmd );

	{
		local $/ = undef;
		local *FILE;
		open FILE, "<$TESTSTATE_LASTRUN_STD";
		$TESTSTATE_LAST_OUTPUT = <FILE>;
		close FILE
	}
}

sub extractReportedChecksum
{
	my $k = shift;

	 # print $TESTSTATE_LAST_OUTPUT;

	die "failed to find CS" unless( $TESTSTATE_LAST_OUTPUT =~ /^SHA1\/FULL\/([\w\/]+)\s+.*$k$/m);
	my $r = $1;
	chomp $r;

 	# print "GFS reported $k -> $r\n";

	return $r; 
}

sub verifyReportedChecksum
{
	my $path = shift;
	my $seed = shift;

	my $r = extractReportedChecksum( $path );
	my $c = $shaForSeed{$seed};

	die "Verify Reported Checksum Failed - $path - $r ne $c" if( $r ne $c );

	print "$TESTSTATE_TEST_NAME - OK - gfs_checksum - $seed - $path\n";

}



sub verifyFile
{
	my $path = shift;
	my $seed = shift;

	my $found = getSha( $path );

	die "Verify Checksum Failed - $path - $found ne $shaForSeed{$seed}" if( $found ne $shaForSeed{$seed});

	print "$TESTSTATE_TEST_NAME - OK - verifyFile - $seed - $path\n";

}

use File::Copy;

sub move
{
	my $a = shift;
	my $b = shift;

	File::Copy->move( $a, $b );

	print "$TESTSTATE_TEST_NAME - mv - $a -> $b\n";
}

sub rm
{
	my $a = shift;

	unlink( $a );

	print "$TESTSTATE_TEST_NAME - rm - $a\n";
}

sub test_simplePathnames
{
	clear_test_env;
	testname 'test_simplePathnames';
	mkfile '/tmp/gfstest/file1', 15;
	mkfile '/tmp/gfstest/file2', 20;
	cd '/tmp/gfstest';
	run "gfs checksum file1 file2";

	verifyFile( '/tmp/gfstest/file1', 15 );
	verifyFile( '/tmp/gfstest/file2', 20 );

	verifyReportedChecksum( 'file1', 15 );

	rm '/tmp/gfstest/file1';

	verifyReportedChecksum( 'file1', 15 );

	run "gfs checksum -G 0 file1 file2";
}

## Assemble target such that it has
##

sub test_rsyncmega
{
	clear_test_env;
	testname 'test_rsyncmega';

## File0 - An immoveable file
## File1 - A   # file in right place
## File2 - B   # file needs a rename nad has to get out of the way
## File6 - F   # orphaned in the new tree, no winkins
## File-x1 - J # pure swap case
## File-x2 - I # pure swap case
## File9x - K  # make intentional orphan with data K

	mkfile '/tmp/gfstest/target/file1',   'A';
	mkfile '/tmp/gfstest/target/file2',   'B';
	mkfile '/tmp/gfstest/target/file6',   'F';
	mkfile '/tmp/gfstest/target/file-x1', 'J';
	mkfile '/tmp/gfstest/target/file-x2', 'I';
	mkfile '/tmp/gfstest/target/file9x',  'K';

#     T     S
# A   1  
# B   1
# C      	1   file3
# E         1   file4
# H         1   file2
# I   1     1
# J   1     1
# K   1     1
# F   1


# E an H are the only things that have to come over e-file8,file4  h-file2 

## dir1/File3 - C # input t
## dir2/File3 - D # input file that overlaps other input file
## dir1/File4 - E # input file that that is a net new hash
## dir1/File1 - A # target file already in the right place
## dir1/File8 - E # two input files with same hash (trigger local move, 1x copy)
## dir1/File2 - H # net new file overwriting a existing file who is needed elsewhere 
## dir1/File5 - B # needs to pull fom the orphan
## dir1/File-x1 - I # pure swap case
## dir1/File-x2 - J # pure swap case
## dir1/File9x - A # make an orphan
## dir1/File9a - K # one of the places that 9x can go
## dir1/File9b - K # a place for a copy of a wink in
## dir1/File9c - K # a place for a copy of a wink in

	mkfile '/tmp/gfstest/source/file3',   'C';
	mkfile '/tmp/gfstest/source/file4',   'E';
	mkfile '/tmp/gfstest/source/file1',   'A';
	mkfile '/tmp/gfstest/source/file8',   'E';
	mkfile '/tmp/gfstest/source/file2',   'H';
	mkfile '/tmp/gfstest/source/file5',   'B';
	mkfile '/tmp/gfstest/source/file-x1', 'I';
	mkfile '/tmp/gfstest/source/file-x2', 'J';
	mkfile '/tmp/gfstest/source/file9x',  'A';
	mkfile '/tmp/gfstest/source/file9a',  'K';
	mkfile '/tmp/gfstest/source/file9b',  'K';
	mkfile '/tmp/gfstest/source/file9c',  'K';
	`touch  /tmp/gfstest/source/zero`;

}




# test_simplePathnames();
test_rsyncmega();

