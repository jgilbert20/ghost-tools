#!/usr/bin/perl

use strict;
use warnings;

#use diagnostics -verbose;

use File::Basename;
use File::Spec;
use File::Path;
use File::Copy;
use Cwd;

my $TESTSTATE_PWD = getcwd();
my $TESTSTATE_LASTRUN_STD;
my $TESTSTATE_LASTRUN_ERR;
my $TESTSTATE_LAST_OUTPUT;

sub mkdirs($)
{
	my $dir = shift;

	# my $dirx = dirname $dir;

	print "MKDIRS:[$dir]\n";
	eval { mkpath( $dir, 1 ) };
	$@ and die "Couldn't create dir path: $! $@";
	die "Did not find new path" if not -d $dir;

	return 1;
}

sub mkfile($$)
{
	my $path = shift;
	my $seed = shift;

	mkdirs(dirname($path) );

	open FILE, ">$path" or die "Cannot open $path: $!";
	print FILE "$seed";
	close FILE;
}

sub cd($)
{
	my $newpath = shift;
	$TESTSTATE_PWD = $newpath;

	die unless -e $TESTSTATE_PWD;
	die unless -d $TESTSTATE_PWD;
}

sub run($)
{
	my @c = @_;

	my $i = 0;
	my $runPrefix = "gfstest.run.$i";

	$TESTSTATE_LASTRUN_STD = "$runPrefix.stdout";
	$TESTSTATE_LASTRUN_ERR = "$runPrefix.stderr";

	my $cmd = "( cd $TESTSTATE_PWD && @c ) > $TESTSTATE_LASTRUN_STD 2> $TESTSTATE_LASTRUN_ERR";
	print "RUN:[$cmd]\n";
	system($cmd );

	{
		local $/ = undef;
		local *FILE;
		open FILE, "<$TESTSTATE_LASTRUN_STD";
		$TESTSTATE_LAST_OUTPUT = <FILE>;
		close FILE
	}
}

sub baseline_reported_checksum
{
	my $k = shift;

	print $TESTSTATE_LAST_OUTPUT;

	die "failed to find CS" unless( $TESTSTATE_LAST_OUTPUT =~ /^([\w\/]+)\s+.*$k$/m );
	
	print "got: $1\n";

	return $1; 

}

sub test_simplePathnames
{
	mkfile '/tmp/gfstest/file1', 15;
	mkfile '/tmp/gfstest/file2', 20;
	cd '/tmp/gfstest';
	run "gfs checksum file1 file2";

	baseline_reported_checksum( 'file1' );
}

test_simplePathnames();
