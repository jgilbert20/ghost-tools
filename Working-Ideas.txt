Working Ideas.txt

- [ ] wire in copy and move to sync operation now that they are implemented
- [ ] Properly implement volumes
- [ ] Implement an AFN cache in a test (non-live capability) - lets not get too reliant on caching for the time being. But lets update the cache on saves/exits, and do a test “learn” that intentionally doesn’t hit operational code so we can surface cases where the absoluteLFN scenario breaks down
- [ ] properly fix the idea of a "fundamental"

- [ ] test cases
	- [ ] core test cases for move/copy inside filesystem fs:
	- [ ] ADD TEST CASE FOR COPY (both for overlap, duplicate files, etc)
	- [ ] ADD TEST CASE FOR MOVE (check no conflcits, etc, etc)
	- [ ] ADD test case pointer get,set
	- [ ] store and retreive from objectstores
	
sdfsdf

	sdfsdf
	sdfsdf

sdfsdf


- [ ] Bug:  "gfs store obj:core:file1 --stats  newfile24" run twice seems to force a spurious hash, suspect its the pass through of sourceVerify. SourceVerify on the pointer seems to force the underlying FS to recheck unnecessarily.

- [ ] IMPORTANT BUG CHECK - a cp -r on a directory with a .gfs file seemed to generate really strange errors on the first run.
- [ ] compare has an annoying bug - not really matching paths for the top most node properly. (Everything else seems to work.)


- [x] make sure undef is really clear in serialization/deserialization [DONE]
- [x] finish implementing learn() [DONE]
- [x] fix the incorporation logic code. [DONE]


# Priorities

Generally: Get copy|rsync working PERFECTLY then focus on automation and object stores

- get LS working with snapshots
	we should see new truth enter system (even if its not saved anywhere)
	pulling in snapshot does not trigger a merge (or does it?)
	when TK shuts down, have it write out every ghost with AFNs so we can do visual check
	also there should be an AFN cache just to be sure logic is super tight
	(e.g. check for collisions)

- now we need to have a world where we can do a recursive descent into a snapshot
  in a clean way

WORKS              gfs ls snap:snapshot-9247.out:a/filea1 
DOESNT WORK:       gfs ls snap:snapshot-9247.out:a
needs better error gfs ls snap:snapshot-9247.out:a/doesnotexist

- lsdup should work with snapshots
- need to implement rsync
- why is . getting stored in ghost descriptors when you do a lsdup .????
- implement aliases properly (which means implementing a default object store)
- make sure ls function is really working properly with @ARGV
- findChildren should start with the files found in the descriptor, saving directory hashing
- we aren't handling the thunks, therefore directories aren't geting hashes
- ought to refactor obtainGhostForLFN() to hit a set of registered FSEs
- support for identification of deleted files
- support for filesystems that may or may not be online - e.g. volumes that mount or unmount
- allow some places to avoid getting .gfs_ip files created
- need to create a better escape/unescaping mechanism for basic serialization
- implement database cache
- look into revocation rules and get them all airtight
- revisit how we get a full hash and how we synchronize time between stat and hash so 



TODO: -G|guard - if a basic something hasn't been checked in this many days, check it again
should get a warning if not specified and old data is being relied on


gfs symmirror snap:foo C

	Make C look like foo but just with symbolic links

gfs store file1 -> hash

	Stores file1 as a blob object, and gives you a handle to it

gfs retrieve obj:234abce3 foo

	Retrieves a blob object and saves it as a local file

gfs view obj:234abce3

	View as a text document

gfs verify A B C

    can A and B reconstruct everything in directory C?

gfs snapshot C snap:foo

	Add everything in C to the snapshot called foo. Checksums are forced if not present
	but they are not recalcualted unnecessarily

gfs verify C snap:foo

	Verify if C contains everything in snapshot foo (is C in conformance to foo?)
	If C has extra things, that is OK. The thing we are testing is snap:foo

gfs verify snap:foo A

	Verify that snapshot foo has everything now in A.. That is, is there anything
	in volume A we cannot find in snap:foo?

gfs rsync|copy|cp A B

	Acts like we are copying A to B. We will feel free to move anything
	around in B to make it look like A. 

gfs rsync|copy|cp A B --pillage=C

	In cases where it makes sense to fill in B by pillaging from C, go ahead and do that

gfs rsync|copy|cp A B --delete

	Same as earlier, but things in B that aren't supposed to be there will be moved to a
	"deleted-xxxxxx" subdirectory kept at the top level of B

gfs rsync|copy|cp A B --delete=C

	Same as earlier, but things in B that aren't supposed to be there will be moved to a
	"deleted-xxxxxx" subdirectory kept at the top level of C

gfs deduplicate A B C 

	Go through C, and anything that is duplicated in A, B or C is moved out

gfs deduplicate A B C --lighten|thunk

	Go through C -- things that are no longer needed are converted to thunks

gfs lighten A B C

    anything in C that can be reconstructed with A and B will be converted into a
    lightweight thunk file

gfs thicken A B C

	Convert all thunks in C by copying files from A and B

gfs bless /path/to/C volume1

	now any AFN under /path/to/c will be volumized

gfs verify vol:volume1 snap:foo 

	equivilent to gfs verify /path/to/C snap:foo

gfs map add /my/working/dir vol:volume1/my-working-dir-backup --orphans

	Creates a rule that /my/working/dir should mirror to volume1 and retain orphans

gfs init /foo/bar

	Creates a new objectstore at /foo/bar.

gfs copy /my/working/dir obj:/foo/bar

	Copies everything into object store, giving you back a handle to the saved snapshot


gfs run

	push and pull data from all places until done


gfs scan .
	
	Updates all of our descriptors and also updates volume mappings
	Brings our localdatabase up to date
	basically the same operation as a snapshot but doesn't write a file

